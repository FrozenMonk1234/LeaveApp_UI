@page "/"

@inject IUserService _userService
@inject ILeaveService _leaveService
@inject NavigationManager NavManager
@inject Blazored.SessionStorage.ISessionStorageService sessionManager
<h1>Take Leave</h1>

@if (error)
{
    <ErrorMessage Message="@ErrorMessage"></ErrorMessage>
}


<div style="height: 3rem"></div>

<EditForm Model="@leaveDetail" OnInvalidSubmit="@SubmitLeave">


    <div class="form-group row">
        <div class="col-sm-2">
            <label>User:</label>
        </div>
        <div class="col-sm-3">
            @*<input @bind="leaveDetail.UserId" list="userlist" type="text" style="width:300px;" name="User" required />*@
            <select @onchange="onUserChange" style="width:300px;" class="form-control" id="userlist">
                <option>Select...</option>
                @foreach (var item in userDetailList)
                {
                    <option value="@item.Id">@item.FirstName @item.LastName</option>
                }
            </select>
        </div>

    </div>
    <div style="height: 3rem"></div>

    <div class="form-group row">
        <div class="col-sm-3">
            <label>Total leave days taken: @userDetail.LeaveDays </label>
        </div>

    </div>



    <div class="form-group row">

        <div class="col-sm-3">
            <label>Total leave days left: @userDetail.LeaveLeft</label>
        </div>
    </div>

    <div style="height: 3rem"></div>

    <div class="form-group row">
        <div class="col-sm-2">
            <label>Leave type</label>
        </div>
        <div class="col-sm-3">
            @*<input class="form-control" @bind="leaveDetail.TypeOfLeave" list="leaveType" type="text" style="width:300px;" name="LeaveType" required />*@
            <select class="form-control" @onchange="onLeaveChange" style="width:300px;" id="leaveType" required>
                <option>Select...</option>
                @foreach (var item in typeOfLeaveList)
                {
                    <option value="@item.Description">@item.Description</option>
                }
            </select>
        </div>

    </div>


    <div class="form-group row">
        <div class="col-sm-2">
            <label>First Name</label>
        </div>
        <div class="col-sm-3">
            <input class="form-control" type="text" @bind="userDetail.FirstName" style="width:300px;" name="FirstName" required />
        </div>
    </div>

    <div class="form-group row">
        <div class="col-sm-2">
            <label>Last Name</label>
        </div>
        <div class="col-sm-3">
            <input class="form-control" type="text" @bind="userDetail.LastName" style="width:300px;" name="LastName" required />
        </div>
    </div>



    <div class="form-group row">
        <div class="col-sm-2">
            <label>Date:</label>
        </div>
        <div class="col-sm-3">
            from: &nbsp; <input type="date" @bind="leaveDetail.FromDate" name="LeaveStartDate" required /> &nbsp; to: &nbsp; <input type="date" @bind="leaveDetail.ToDate" name="LeaveEndDate" required />
        </div>
    </div>



    <div class="form-group row">
        <div class="col-sm-2">
            <label>Reason</label>
        </div>
        <div class="col-sm-3">
            <input class="form-control" type="text" @bind="leaveDetail.Reason" style="width:300px; height: 100px; align-content:flex-start" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col-sm-2">
            <label></label>
        </div>
        <div class="col-sm-3">
            <input type="submit" class="btn btn-primary form-control" style="width:300px;" @onclick="SubmitLeave" />
        </div>
    </div>

</EditForm>
@code{

    string ErrorMessage = string.Empty;
    bool error = false;
    List<Leave> leaveDetailList = new List<Leave>();
    Leave leaveDetail = new Leave();
    User userDetail = new User();
    List<User> userDetailList = new List<User>();
    List<TypeOfLeave> typeOfLeaveList = new List<TypeOfLeave>();

    protected override async Task OnInitializedAsync()
    {
        userDetail.IsActive = true;

        userDetailList = await _userService.GetAllUsers();
        if (!userDetailList.Any())
        {
            userDetail.LeaveDays = 0;
            userDetail.LeaveLeft = 10;
        }

        typeOfLeaveList = await _leaveService.GetAllTypeOfLeave();
        this.StateHasChanged();
    }

    public async Task SubmitLeave()
    {
        try
        {
            if (leaveDetail.FromDate > leaveDetail.ToDate)
            {
                error = true;
                ErrorMessage = "Leave from date cannot be greater than to date";
                this.StateHasChanged();
            }
            else
            {
                var resultSaveUser = await _userService.CreateUser(userDetail);
                leaveDetail.UserId = resultSaveUser.Id;
                var resultSaveLeave = await _leaveService.CreateLeave(leaveDetail);
              await sessionManager.SetItemAsync("userDetail", resultSaveUser);
                NavManager.NavigateTo("Dashboard/" + resultSaveUser);
            }


        }
        catch (Exception e)
        {
            error = true;
            ErrorMessage = e.Message;
        }

    }

    void onUserChange(ChangeEventArgs e)
    {
        int selectedId = 0;
        var selectedStatus = e.Value.ToString();
        if (Int32.TryParse(selectedStatus, out selectedId))
        {
            leaveDetail.UserId = selectedId;
        }
    }

    void onLeaveChange(ChangeEventArgs e)
    {
        leaveDetail.TypeOfLeave = e.Value.ToString();
    }
}